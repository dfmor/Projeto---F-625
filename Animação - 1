import numpy as np
import random as rd
from numpy.linalg import norm
import vpython as vp
from scipy.constants import k as kb

# DESCONSIDERANDO COLISÕES ENTRE ESFERAS PEQUENAS

# pos é o array das posições
# vel é array dos vetores velocidade
# radius é o array dos raios


def wall(q):  # para colisão da esfera q com as paredes
    # testa se a esfera colide com alguma parede
    # caso houver colisão, atualiza a velocidade
    xq, yq, zq = pos[q, 0], pos[q, 1], pos[q, 2]
    vx, vy, vz = vel[q, 0], vel[q, 1], vel[q, 2]
    p = radius[q]
    # testando colisão com as paredes em x=-L/2 e x=L/2
    if xq <= -L/2 + p and vx < 0:
        vel[q, 0] += 2 * abs(vx)
    elif xq >= L/2 - p and vx > 0:
        vel[q, 0] -= 2 * abs(vx)
    # testando colisão com as paredes em y=-L/2 e y=L/2
    if yq <= -L/2 + p and vy < 0:
        vel[q, 1] += 2 * abs(vy)
    elif yq >= L/2 - p and vy > 0:
        vel[q, 1] -= 2 * abs(vy)
    # testando colisão com as paredes em z=-L/2 e z=L/2
    if zq <= -L/2 + p and vz < 0:
        vel[q, 2] += 2 * abs(vz)
    elif zq >= L/2 - p and vz > 0:
        vel[q, 2] -= 2 * abs(vz)


def col(i):  # para colisão entre a esfera s[i] e esfera grande
    m1, m2 = massa, MASSA  # massas das eferas envolvidas
    v1f = (m1-m2)/(m1+m2)*v1i + 2*m2/(m1+m2)*v2i  # encontrando v1f
    v2f = 2*m1/(m1+m2)*v1i + (m2-m1)/(m1+m2)*v2i  # encontrando v2f
    delta1 = abs(v1f - v1i)
    delta2 = abs(v2f - v2i)
    vel[i] = vel[i] + delta1*r      # atualiza velocidade da esfera i
    vel[N-1] = vel[N-1] - delta2*r  # atualiza velocidade da esfera grande


# Dados
N = 1000  # número de esferas
L = 1  # lado da caixa cúbica

raio = L/100
RAIO = L/10

massa = 5.32e-23   # Massa de uma molécula de O2
MASSA = massa*1e3  # Massa da partícula em suspensão será 1e3 vezes maior

# Criar arrays com os dados
radius = np.ones(N, float)*raio
pos = np.zeros([N, 3], float)
vel = np.zeros([N, 3], float)
# Para a esfera maior:
radius[N-1] = RAIO

# Módulo da velocidade das partículas pelo teorema da equipartição
T = 300  # Temperatura do sistema em K
v = np.sqrt(3*kb*T/massa)/10  # módulo da velocidade (dividido por 10 para melhorar visualização)

vp.canvas(height=621, width=993)

# atribuindo velocidades e posições
for w in range(N-1):  # Não inclui a esfera grande, de forma que sua posição e sua velocidade continuam nulas
    # Defina o sentido da velocidade de cada partícula de forma aleatória
    vel[w] = np.array([rd.uniform(-1, 1), rd.uniform(-1, 1), rd.uniform(-1, 1)])
    # Normalize o vetor anterior e multiplique pelo módulo desejado para ter o valor correto da velocidade
    vel[w] *= v/norm(vel[w])
    # Defina aleatoriamente a posição da partícula w na caixa
    pos[w] = np.array([rd.uniform(-L/2, L/2), rd.uniform(-L/2, L/2), rd.uniform(-L/2, L/2)])
    while norm(pos[w]) <= (RAIO+raio):
        pos[w] = np.array([rd.uniform(-L/2, L/2), rd.uniform(-L/2, L/2), rd.uniform(-L/2, L/2)])

tf = 5000  # tempo da animação
fps = 30
h = 1/fps  # tamanho do passo temporal
tpoints = np.arange(0, tf, h)

# Array das esferas para animação:
s = np.empty(N, vp.sphere)

# Colocando todas as esferas nas suas devidas posições
for k in range(N):
    if k == N-1:
        s[k] = vp.sphere(pos=vp.vector(pos[k, 0], pos[k, 1], pos[k, 2]), radius=radius[k])
    else:
        s[k] = vp.sphere(pos=vp.vector(pos[k, 0], pos[k, 1], pos[k, 2]), radius=radius[k], visible = False)
s[N-1].color = vp.color.yellow  # Esfera maior será amarela
vp.attach_trail(s[N-1], color=vp.color.yellow)  # torna visível a trajetória da esfera grande

for t in tpoints:
    vp.rate(fps)  # define velocidade da animação
    # para cada esfera pequena, testar se ela colide com a grande
    for k in range(N):
        if k != N-1:
            dmin = raio + RAIO  # distância em que ocorre colisão
            r = pos[k] - pos[N-1]
            R = norm(r)
            r /= R  # versor apontando do centro de k ao centro da esfera grande
            v1i = np.dot(r, vel[k])    # componente radial da velocidade de s[k]
            v2i = np.dot(r, vel[N-1])  # componente radial da velocidade da esfera grande
            if R <= dmin:  # atualizar velocidades quando houver colisão
                # outras condições são necessárias para impedir que o impulso seja aplicado mais de uma vez
                if v1i <= 0 <= v2i:  # esferas colidem se estiverem viajando em direções contrárias em r
                    col(k)
                elif v1i*v2i > 0 and v2i > v1i:  # viajando na mesma direção e a que está "atrás" é mais rápida
                    col(k)

        wall(k)  # atualiza velocidade se houver colisão com parede

    # após atualizar todas as velocidades, podemos atualizar as posições
    pos += vel*h

    # Atualizar animação
    for k in range(N):
        s[k].pos = vp.vector(pos[k, 0], pos[k, 1], pos[k, 2])
